/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    'Index': RouteRecordInfo<'Index', '/', Record<never, never>, Record<never, never>, 'Character' | 'CharacterDetail' | 'Dialog' | 'Wrold' | 'WroldDetail'>,
    'CharacterDetail': RouteRecordInfo<'CharacterDetail', '/character/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'Character': RouteRecordInfo<'Character', '/character', Record<never, never>, Record<never, never>>,
    'Dialog': RouteRecordInfo<'Dialog', '/dialog', Record<never, never>, Record<never, never>>,
    'WroldDetail': RouteRecordInfo<'WroldDetail', '/world/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'Wrold': RouteRecordInfo<'Wrold', '/world', Record<never, never>, Record<never, never>>,
    'NotFound': RouteRecordInfo<'NotFound', '/:path(.*)', { path: ParamValue<true> }, { path: ParamValue<false> }>,
    'AdminUser': RouteRecordInfo<'AdminUser', '/admin/user', Record<never, never>, Record<never, never>>,
    'Login': RouteRecordInfo<'Login', '/login', Record<never, never>, Record<never, never>>,
    'Register': RouteRecordInfo<'Register', '/register', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/views/index.vue': {
      routes: 'Index' | 'WroldDetail' | 'CharacterDetail' | 'Character' | 'Dialog' | 'Wrold' | '//character' | '//dialog' | '//world'
      views: 'default'
    }
    'src/views/index/character/[id].vue': {
      routes: 'CharacterDetail'
      views: never
    }
    'src/views/index/character/index.vue': {
      routes: 'Character'
      views: never
    }
    'src/views/index/dialog/index.vue': {
      routes: 'Dialog'
      views: never
    }
    'src/views/index/world/[id].vue': {
      routes: 'WroldDetail'
      views: never
    }
    'src/views/index/world/index.vue': {
      routes: 'Wrold'
      views: never
    }
    'src/views/[...path].vue': {
      routes: 'NotFound'
      views: never
    }
    'src/views/admin/user.vue': {
      routes: 'AdminUser'
      views: never
    }
    'src/views/login.vue': {
      routes: 'Login'
      views: never
    }
    'src/views/register.vue': {
      routes: 'Register'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
